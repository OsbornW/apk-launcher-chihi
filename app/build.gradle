import com.google.gson.Gson

import java.nio.charset.StandardCharsets

plugins {
    id 'com.android.application'
}

android {
    namespace 'com.soya.launcher'
    compileSdk 33

    defaultConfig {
        applicationId "com.soya.launcher"
        minSdk 24
        targetSdk 33
        versionCode 39
        versionName "1.39"

        // 设置自定义属性
        manifestPlaceholders = [
                company   : "3",
                user_id   : "62",
                appId     : "launcher",
                channel   : "LA23001",
                chihi_type: "X98K",
                model     : "001"
        ]

        // 构建自定义配置字段
        buildConfigField "String", "COMPANY", "\"${manifestPlaceholders.company}\""
        buildConfigField "String", "USER_ID", "\"${manifestPlaceholders.user_id}\""
        buildConfigField "String", "APP_ID", "\"${manifestPlaceholders.appId}\""
        buildConfigField "String", "CHANNEL", "\"${manifestPlaceholders.channel}\""
        buildConfigField "String", "CHIHI_TYPE", "\"${manifestPlaceholders.chihi_type}\""
        buildConfigField "String", "MODEL", "\"${manifestPlaceholders.model}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        //打包应用
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "Launcher_${defaultConfig.versionName}_${getTime()}_${defaultConfig.manifestPlaceholders.channel}.apk"
            }
        }
    }
    signingConfigs {
        /*debug{
            storeFile file("platform_H710_701.jks")
            storePassword "platform"
            keyAlias "platform"
            keyPassword "platform"
        }*/

        debug {
            storeFile file("platform_X98K_301.keystore")
            storePassword 'android'
            keyAlias 'platform'
            keyPassword 'android'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        buildConfig = true
    }

    lintOptions {
        abortOnError false
    }

    task genRawJson() {
        doLast {
            println "genRawJson"
            writeRawJson()
        }
    }
    genRawJson.dependsOn(build)
}

dependencies {
    //implementation files('libs/hslib-r0.0.2-release-LA22001.aar', 'libs/system.jar', 'libs/softwinner.keystone.jar')
    implementation files('libs/hslib-r0.0.2-release-LA23001.aar', 'libs/system.jar', 'libs/softwinner.keystone.jar')
    //implementation files('libs/hslib-r0.0.2-release-LA27001.aar', 'libs/system.jar', 'libs/softwinner.keystone.jar')

    implementation 'androidx.leanback:leanback:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.core:core-role:1.0.0'
    implementation 'androidx.test.ext:junit:1.1.5'
    implementation 'jp.wasabeef:glide-transformations:4.3.0'
    implementation 'me.laoyuyu.aria:core:3.8.16'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.lzy.net:okgo:2.1.4'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.9.0'
    annotationProcessor 'me.laoyuyu.aria:compiler:3.8.16'
}

def getTime() {
    return new Date().format("yyyyMMdd_HHmm", TimeZone.getDefault());
}

def createPath(file) {
    if (!file.exists()) {
        file.mkdirs();
    }
}

def writeRawJson() {
    try {
        Gson gson = new Gson();
        Map<String, String> data = new HashMap<>();
        data.put("appId", android.defaultConfig.manifestPlaceholders.getAt("appId"));
        data.put("packageName", android.defaultConfig.applicationId);
        data.put("versionName", android.defaultConfig.versionName);
        data.put("version", android.defaultConfig.versionCode);
        data.put("channel", android.defaultConfig.manifestPlaceholders.getAt("channel"));
        data.put("chihi_type", android.defaultConfig.manifestPlaceholders.getAt("chihi_type"));
        data.put("model", android.defaultConfig.manifestPlaceholders.getAt("model"));
        String json = gson.toJson(data);

        def fileName = "readme.json"
        android.applicationVariants.all { variant ->
            if (variant.buildType.name == 'release') {
                def projectDir = project.rootDir

                def buildPath = new File(projectDir, "app/" + variant.buildType.name)
                createPath(buildPath)
                def dstFile = new File(buildPath, "/" + fileName)
                println dstFile

                FileOutputStream fos = new FileOutputStream(dstFile)
                fos.write(json.getBytes(StandardCharsets.UTF_8));
                fos.close();
            }
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
}

// 设置编译前的任务
//assembleRelease.dependsOn genRawJson
//build.finalizedBy(genRawJson)
