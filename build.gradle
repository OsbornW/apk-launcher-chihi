import com.google.gson.Gson

import java.nio.charset.StandardCharsets

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.5.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.9.0' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20' apply false
}

apply from: 'version.gradle'

gradle.buildFinished {
    project('app') {
        try {
            android.applicationVariants.all { variant ->
                if (variant.buildType.name == 'release') {
                    Gson gson = new Gson()

                    def buildField = it.android.defaultConfig
                    Map<String, String> data = new HashMap<>()
                    data.put("packageName", buildField.applicationId)
                    data.put("versionName", buildField.versionName)
                    data.put("version", buildField.versionCode)
                    data.put("appId", getBuildConfigFieldValue(variant, "APP_ID")[1..-2])
                    data.put("channel", getBuildConfigFieldValue(variant, "CHANNEL")[1..-2])
                    data.put("chihi_type", getBuildConfigFieldValue(variant, "CHIHI_TYPE")[1..-2])
                    data.put("model", getBuildConfigFieldValue(variant, "MODEL")[1..-2])

                    def projectDir = getApkOutputDir()
                    def buildPath = new File(projectDir, variant.flavorName + "\\" + variant.buildType.name)
                    createPath(buildPath)
                    def dstFile = new File(buildPath, "readme.json")

                    FileOutputStream fos = new FileOutputStream(dstFile)
                    def json = gson.toJson(data)
                    fos.write(json.getBytes(StandardCharsets.UTF_8))
                    fos.close()
                }
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

def createPath(file) {
    if (!file.exists()) {
        file.mkdirs()
    }
}

def getApkOutputDir() {
    return "${project.rootProject.projectDir}\\app\\build\\outputs\\apk"
}

static String getBuildConfigFieldValue(def variant, def fiedName) {
    def properties = variant.productFlavors[0].properties
    def name = properties.get("name")
    if (name != variant.flavorName) {
        return ""
    }
    def configs = properties.get("buildConfigFields")
    def address = null
    for (Map.Entry<String, Object> item : configs) {
        def key = item.key
        if (key == fiedName) {
            address = item.value
        }
    }
    if (address == null) return ""
    def field = address.getClass().getDeclaredField("value")
    field.setAccessible(true)
    return field.get(address)
}

